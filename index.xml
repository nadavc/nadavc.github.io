<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@nadavc</title>
    <link>http://nadavc.com/</link>
    <description>Recent content on @nadavc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Apr 2015 00:44:37 -0700</lastBuildDate>
    <atom:link href="http://nadavc.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>IntelliJ Gem: Structural Search</title>
      <link>http://nadavc.com/posts/structural-search-in-intellij/</link>
      <pubDate>Sun, 19 Apr 2015 00:44:37 -0700</pubDate>
      
      <guid>http://nadavc.com/posts/structural-search-in-intellij/</guid>
      <description>

&lt;p&gt;As an engineer, I&amp;rsquo;ve always been obsessed with productivity and efficiency. I frequently experiment with new tools and methodologies and try to find what works best for me. The IDE is no exception&amp;hellip; and out of everything that&amp;rsquo;s out there, IntelliJ is hard to beat.&lt;/p&gt;

&lt;p&gt;One of the hidden (and &lt;a href=&#34;https://www.jetbrains.com/idea/help/structural-search-and-replace.html&#34;&gt;hardly&lt;/a&gt; documented) gems in IntelliJ is the structured search. In a sentence, it allows you to leverage IntelliJ&amp;rsquo;s understanding of code to perform complex search and replace scenarios. There are lots of cool usages for this - although the real power hides under the &lt;code&gt;Script constraints&lt;/code&gt; section.&lt;/p&gt;

&lt;h2 id=&#34;finding-usages-in-annotated-classes:ae733365846f59b8f5ad0f21c7c9d46c&#34;&gt;Finding usages in annotated classes&lt;/h2&gt;

&lt;p&gt;Some might say that the controller layer should not access the data layer directly. How would you search for these instances? Structured search makes it easy. In this example, we&amp;rsquo;re searching for all classes that are annotated with &lt;code&gt;@Controller&lt;/code&gt; and have a private member that is (&lt;em&gt;or inherits from&lt;/em&gt;) a type that contains &amp;ldquo;Repo&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss1_code.png&#34; alt=&#34;ss1 code&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss1_annotation.png&#34; alt=&#34;ss1 annotation&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss1_type.png&#34; alt=&#34;ss1 type&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;finding-candidates-for-god-objects:ae733365846f59b8f5ad0f21c7c9d46c&#34;&gt;Finding candidates for God objects&lt;/h2&gt;

&lt;p&gt;Every legacy code ends up suffering from the &lt;code&gt;God object&lt;/code&gt; code smell. Classes with a large number of methods are very likely to fall into this category. Here&amp;rsquo;s how it&amp;rsquo;s done with structural search.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss2_code.png&#34; alt=&#34;ss2 code&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss2_methodname.png&#34; alt=&#34;ss2 code&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;finding-inefficient-log-statements:ae733365846f59b8f5ad0f21c7c9d46c&#34;&gt;Finding inefficient log statements&lt;/h2&gt;

&lt;p&gt;SLF4J recommends we use &lt;a href=&#34;http://www.slf4j.org/faq.html#logging_performance&#34;&gt;parameterized&lt;/a&gt; log entries to improve efficiency. How do we find log entries that use concatenation? Enter &lt;code&gt;Script constraints&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss3_code.png&#34; alt=&#34;ss3 code&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss3_logger.png&#34; alt=&#34;ss3 logger&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss3_call.png&#34; alt=&#34;ss3 call&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss3_firstparam_top.png&#34; alt=&#34;ss3 params1&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/ss3_firstparam_bottom.png&#34; alt=&#34;ss3 params2&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;wait-what:ae733365846f59b8f5ad0f21c7c9d46c&#34;&gt;Wait&amp;hellip; what?&lt;/h2&gt;

&lt;p&gt;IntelliJ&amp;rsquo;s help states the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Script constraints are used when items to search for are more than a plain match. If you are looking for certain language constructs (for example, constructors with the specified number of parameters, or members with the specified visibility modifiers), apply constraints described as Groovy scripts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Granted, this leaves something to be desired. In essence, when &lt;code&gt;Script constraints&lt;/code&gt; is enabled, IntelliJ executes the Groovy script against the variable that was found (in this case, &lt;code&gt;$FirstParam$&lt;/code&gt;). If the script evaluates to &lt;a href=&#34;http://www.groovy-lang.org/semantics.html#Groovy-Truth&#34;&gt;true&lt;/a&gt;, the condition is met. As you might have guessed, the expression is passed to the Groovy code as &lt;code&gt;__context__&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The type of &lt;code&gt;__context__&lt;/code&gt; depends on the variable in question, although it will always be one of IntelliJ&amp;rsquo;s internal &lt;code&gt;Program Structure Interface (PSI)&lt;/code&gt; types. For me, the easiest way to find this out was to output the class name to a file while evaluating the Groovy script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;new File(&amp;quot;/Users/user/filetype.txt&amp;quot;).append(__context__.class.canonicalName)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, going back to our example, in order to find non-parameterized log statements, we are looking for statements that include a non-literal expression. Anything other than a literal expression (effectively a regular string) would be considered inefficient, as it would force string concatenation for all log statements.&lt;/p&gt;

&lt;p&gt;Here are some links for more information about the different types of PsiExpressions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/IDEADEV/PSI+Cookbook&#34;&gt;PSI Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/help/viewing-psi-structure.html&#34;&gt;Viewing PSI Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/intellij-community&#34;&gt;IntelliJ source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Why the Corporate Career Ladder is Broken</title>
      <link>http://nadavc.com/posts/why-corporate-career-ladder-is-broken/</link>
      <pubDate>Sun, 05 Apr 2015 01:35:42 -0700</pubDate>
      
      <guid>http://nadavc.com/posts/why-corporate-career-ladder-is-broken/</guid>
      <description>

&lt;p&gt;We live in exciting times. We have the &lt;a href=&#34;http://agilemanifesto.org/&#34;&gt;agile manifesto&lt;/a&gt;, &lt;a href=&#34;http://www.infoq.com/articles/what-are-self-organising-teams&#34;&gt;self-organizing&lt;/a&gt; teams, &lt;a href=&#34;http://automattic.com/&#34;&gt;fully&lt;/a&gt; &lt;a href=&#34;http://github.com&#34;&gt;distributed&lt;/a&gt; &lt;a href=&#34;http://stackoverflow.com&#34;&gt;organizations&lt;/a&gt;, Google&amp;rsquo;s 20% time, etc. We made progress. One thing, however, has not changed for at least a hundred years. The corporate ladder.&lt;/p&gt;

&lt;p&gt;In this essay I hope to outline what I feel is broken with the corporate ladder and how simple reorganization can pivot us to towards the right direction.&lt;/p&gt;

&lt;h2 id=&#34;what-s-the-problem-with-the-career-ladder:d36df5480ef90b35d6f8f08e1ef5a553&#34;&gt;What&amp;rsquo;s the problem with the career ladder?&lt;/h2&gt;

&lt;p&gt;From Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Career ladder is a metaphor for job promotion. In business and human resources management, the ladder typically describes the progression from entry level positions to higher levels of pay, skill, responsibility, or authority. This metaphor is spatially oriented, and frequently used to denote upward mobility within a stratified promotion model. Because the ladder does not provide for lateral movement, it is assumed to be a singular track with the greatest benefits at the top.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The career ladder is a narrow path that assumes our goal is to reach the top. Oftentimes, one&amp;rsquo;s degree of success is directly proportional to the number of people that person manages . Those of us who do not necessary aspire to reach this definition of &lt;em&gt;top&lt;/em&gt;, have no option but to remain somewhere in the middle and wonder if we&amp;rsquo;ve reached the peak of our ability to contribute. This hidden assumption, where everyone can contribute more if they managed more people, is where the corporate ladder fundamentally breaks.&lt;/p&gt;

&lt;h2 id=&#34;shouldn-t-we-consider-people-management-a-career-advancement:d36df5480ef90b35d6f8f08e1ef5a553&#34;&gt;Shouldn&amp;rsquo;t we consider people management a career advancement?&lt;/h2&gt;

&lt;p&gt;While there is no denying that those recognized as high performing individuals are often the ones who are promoted to management, there are two innate problems that remain.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The step you reached isn&amp;rsquo;t necessarily the best for you&lt;/strong&gt;. The &lt;a href=&#34;http://en.wikipedia.org/wiki/Peter_Principle&#34;&gt;Peter Principle&lt;/a&gt; is a concept in management theory that claims promotions are a result of performance in the previous role rather than expected performance in the intended role. Consequently, a promotion might in fact place highly performing individuals in less than adequate positions and cause them to contribute significantly less than their potential. One could argue that organizations are smart enough to realize this and revert their decisions. They&amp;rsquo;re not.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Individuals who aren&amp;rsquo;t promoted are more likely to leave&lt;/strong&gt;. Those who aren&amp;rsquo;t promoted to management aren&amp;rsquo;t necessarily performing poorly. It is the lack of management positions that create the illusion that they are, where in fact, in other organizations, they might have been picked for management. This, in turn, pushes high performing individuals to look for work elsewhere, only because they were unfortunate enough to be with better performing individuals.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;wait-we-now-have-technical-career-paths-and-lateral-moves:d36df5480ef90b35d6f8f08e1ef5a553&#34;&gt;Wait! We now have technical career paths and lateral moves!&lt;/h2&gt;

&lt;p&gt;True, but my position on this is that it is in fact more harmful to organizations. We rarely work as individuals anymore, and &lt;a href=&#34;http://www.goodreads.com/quotes/20103-the-whole-is-greater-than-the-sum-of-its-parts&#34;&gt;someone&lt;/a&gt; much smarter than I once said that &amp;ldquo;the whole is greater than the sum of its parts.&amp;rdquo; What happens when you take a key player and promote her to a new team? The old team takes a hit&amp;hellip; and usually a very significant one. Why would organizations want to encourage this? Why pry the best players out of where they usually play a very significant role? Furthermore, when individuals eyeball these sort of promotions, they begin to think about their ability to shine instead of make the team shine as a whole. This, too, is detrimental to the success of organizations, and should be avoided wherever possible.&lt;/p&gt;

&lt;h2 id=&#34;what-should-we-do:d36df5480ef90b35d6f8f08e1ef5a553&#34;&gt;What should we do?&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&#34;http://www.amazon.com/Reinventing-Organizations-Frederic-Laloux/dp/2960133501&#34;&gt;Reinventing Organizations&lt;/a&gt;, Frederic Laloux discusses how it was previously acceptable to assume all innovation and direction needed to come from the top of the pyramid. In today&amp;rsquo;s information age, we know the opposite is true. Every individual has infinite access to information and ideas, and that teamwork is of utmost importance. How do we go about doing this, yet still make sure people have clear goals in mind?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Focus on business goals.&lt;/strong&gt; Measure teams by business goals. The team&amp;rsquo;s only goal should be to deliver business results. Individuals progress by helping the team succeed, not the other way around.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Celebrate team success by compensating equally.&lt;/strong&gt; Remove personal agendas by compensating everyone on the team equally and openly. Number of subordinates or titles should not matter.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Iterate and improve religiously.&lt;/strong&gt; Continuously aspire to improve based on clear business metrics. Be mindful of when further optimizations can be made, even at the cost of letting team members go. &lt;a href=&#34;http://www.slideshare.net/reed2001/culture-1798664&#34;&gt;Netflix&lt;/a&gt; does this very well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Do not promote within the organization.&lt;/strong&gt; Finally, remove the temptation to shine because there is a new challenge on the horizon. Ensure individuals are 100% committed to the work at hand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these goals in mind, I firmly believe that teams will iterate until they reach perfection, which is the nirvana all businesses want to achieve.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Object Oriented Selenium</title>
      <link>http://nadavc.com/posts/object-oriented-selenium/</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 -0700</pubDate>
      
      <guid>http://nadavc.com/posts/object-oriented-selenium/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://seleniumhq.com&#34;&gt;Selenium&lt;/a&gt; is an awesome browser automation framework. It saves my team a ton of work on a daily basis. Even the name is &lt;a href=&#34;http://en.wikipedia.org/wiki/Selenium_%28software%29#History&#34;&gt;incredibly&lt;/a&gt; clever:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The name Selenium comes from a joke made by Huggins in an email, mocking a competitor named Mercury, saying that you can cure mercury poisoning by taking selenium supplements. The others that received the email took the name and ran with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, I will present my recommendation and best practices for building clean and maintainable Selenium code, based on what I&amp;rsquo;ve learned over the years.&lt;/p&gt;

&lt;h2 id=&#34;tip-1-abstract-ui-using-pageobject-pattern:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #1 - Abstract UI using PageObject pattern&lt;/h2&gt;

&lt;p&gt;Every UI framework out there emphasizes separation between UI and controller layers. In Selenium, this is done using the &lt;a href=&#34;https://code.google.com/p/selenium/wiki/PageObjects&#34;&gt;PageObject pattern&lt;/a&gt;. PageObject allows you to abstract away UI access from the rest of the code, resulting in clean, reusable, and most importantly - readable code. Instead of accessing divs and css, the code can focus on accessing content. Here’s what it looks like:&lt;/p&gt;

&lt;p&gt;Instead of this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  driver.get(&amp;quot;http://github.com&amp;quot;);

  // click login button
  WebElement loginButton = driver.findElement(By.cssSelector(&amp;quot;a[href*=&#39;login&#39;]&amp;quot;));
  loginButton.click();

  // wait for page to load
  By signInButtonLocator = By.cssSelector(&amp;quot;input.btn&amp;quot;);
  new WebDriverWait(driver, 10).until(
    ExpectedConditions.presenceOfElementLocated(signInButtonLocator)
  );

  // send username and password
  driver.findElement(By.id(&amp;quot;login_field&amp;quot;)).sendKeys(&amp;quot;nadavc&amp;quot;);
  driver.findElement(By.id(&amp;quot;password&amp;quot;)).sendKeys(&amp;quot;ohrly&amp;quot;);

  // submit
  WebElement signInButton = driver.findElement(signInButtonLocator);
  signInButton.click();

  // ..etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  new GitHubHome(driver)
      .goToSignIn()
      .withUsername(&amp;quot;nadavc&amp;quot;)
      .withPassword(&amp;quot;ohrly&amp;quot;)
      .signIn();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tip-2-use-findby-to-remove-boilerplate:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #2 - Use @FindBy to remove boilerplate&lt;/h2&gt;

&lt;p&gt;PageObject is great for abstracting the UI, but the code is still a little verbose. Do you really need to call &lt;code&gt;driver.findElement()&lt;/code&gt; for every UI element that is encapsulated by the PageObject? And what if not all elements are available during class creation?&lt;/p&gt;

&lt;p&gt;Enter @FindBy - members annotated with @FindBy will be wrapped by a proxy that automatically looks up the element when called. You’ll need to call &lt;code&gt;PageFactory.initElements()&lt;/code&gt; to set this up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SignInPage extends SeleniumSegment {

    @FindBy(id = &amp;quot;login_field&amp;quot;)
    private WebElement loginField;

    @FindBy(id = &amp;quot;password&amp;quot;)
    private WebElement passwordField;

    @FindBy(css = &amp;quot;input[value=&#39;Sign in&#39;]&amp;quot;)
    private WebElement signInButton;

    // ... code omitted for brevity
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tip-3-split-large-pageobjects-into-smaller-objects:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #3 - Split large PageObjects into smaller objects&lt;/h2&gt;

&lt;p&gt;Even with the PageObjects pattern, large pages may result in excessive amounts of code in a single class. Some would say that this is a variation of the &lt;a href=&#34;http://en.wikipedia.org/wiki/God_object&#34;&gt;God Object&lt;/a&gt; anti-pattern. To address this, my recommendation is to break large PageObjects into smaller PageObject components and embed them within the large one.&lt;/p&gt;

&lt;h2 id=&#34;tip-4-encapsulate-repeated-blocks-into-their-own-pageobjects:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #4 - Encapsulate repeated blocks into their own PageObjects&lt;/h2&gt;

&lt;p&gt;Most webpages contain repeated blocks that can be abstracted into a single PageObject class. Makes sense when you look at the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nadavc.com/imgs/selenium-repeated-objects.png&#34; alt=&#34;Repeated blocks&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;But how do you tell Selenium to confine @FindBy to search &lt;em&gt;only&lt;/em&gt; for the right &lt;code&gt;.repo-list-name&lt;/code&gt;? Luckily, Selenium supports the notion of &lt;code&gt;context&lt;/code&gt; - whereas you get to define the root of @FindBy’s search. The trick is to call &lt;code&gt;PageFactory.initElements()&lt;/code&gt; with a custom &lt;code&gt;ElementLocatorFactory&lt;/code&gt;. See &lt;code&gt;SearchSegment.java&lt;/code&gt; for a more concrete example.&lt;/p&gt;

&lt;h2 id=&#34;tip-5-use-selenium-s-wait-mechanisms-within-pageobjects:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #5 - Use Selenium’s Wait mechanisms within PageObjects&lt;/h2&gt;

&lt;p&gt;The web is asynchronous by nature, and our Selenium code needs to adapt. Always put wait code &lt;em&gt;within&lt;/em&gt; PageObjects, since these states belong in UI handling code and not anywhere else. Needless to say, &lt;code&gt;Thread.sleep()&lt;/code&gt; is not the solution&amp;hellip; use Selenium’s &lt;code&gt;WebDriverWait&lt;/code&gt; (or its &lt;code&gt;FluentWait&lt;/code&gt; facade).&lt;/p&gt;

&lt;h2 id=&#34;example-code:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Example code&lt;/h2&gt;

&lt;p&gt;In an effort to group all of these tips into working code, I built a simple GitHub scraper that uses Selenium to learn about Microsoft’s favorite open source languages. The source code is available through my &lt;a href=&#34;https://github.com/nadavc/nadavc-blog-code/tree/master/object-oriented-selenium&#34;&gt;GitHub account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;hellip;and yes, I&amp;rsquo;m well aware that this could have been done using GitHub&amp;rsquo;s &lt;a href=&#34;https://developer.github.com/v3/repos/#list-organization-repositories&#34;&gt;API&lt;/a&gt; and a few curl commands :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Genesis</title>
      <link>http://nadavc.com/posts/genesis/</link>
      <pubDate>Sun, 15 Mar 2015 01:46:11 -0700</pubDate>
      
      <guid>http://nadavc.com/posts/genesis/</guid>
      <description>&lt;p&gt;This is my third attempt at a blog. Why start another one? I have plenty of reasons &lt;strong&gt;not&lt;/strong&gt; to. It&amp;rsquo;s time consuming, difficult, irrelevant, boring, repetitive…  But I also have good reasons. I want to improve at articulating my ideas and keep a journal of my learnings (professionally or otherwise). I will try my best to post original content and stay out of clichés, but I can&amp;rsquo;t promise anything :-)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>