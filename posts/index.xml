<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on @nadavc</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on @nadavc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Mar 2015 00:00:00 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Object Oriented Selenium</title>
      <link>http://localhost:1313/posts/object-oriented-selenium/</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 -0700</pubDate>
      
      <guid>http://localhost:1313/posts/object-oriented-selenium/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://seleniumhq.com&#34;&gt;Selenium&lt;/a&gt; is an awesome browser automation framework. It saves my team a ton of work on a daily basis. Even the name is &lt;a href=&#34;http://en.wikipedia.org/wiki/Selenium_%28software%29#History&#34;&gt;incredibly&lt;/a&gt; clever:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The name Selenium comes from a joke made by Huggins in an email, mocking a competitor named Mercury, saying that you can cure mercury poisoning by taking selenium supplements. The others that received the email took the name and ran with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, I will present my recommendation and best practices for building clean and maintainable Selenium code, based on what I&amp;rsquo;ve learned over the years.&lt;/p&gt;

&lt;h2 id=&#34;tip-1-abstract-ui-using-pageobject-pattern:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #1 - Abstract UI using PageObject pattern&lt;/h2&gt;

&lt;p&gt;Every UI framework out there emphasizes separation between UI and controller layers. In Selenium, this is done using the &lt;a href=&#34;https://code.google.com/p/selenium/wiki/PageObjects&#34;&gt;PageObject pattern&lt;/a&gt;. PageObject allows you to abstract away UI access from the rest of the code, resulting in clean, reusable, and most importantly - readable code. Instead of accessing divs and css, the code can focus on accessing content. Here’s what it looks like:&lt;/p&gt;

&lt;p&gt;Instead of this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  driver.get(&amp;quot;http://github.com&amp;quot;);

  // click login button
  WebElement loginButton = driver.findElement(By.cssSelector(&amp;quot;a[href*=&#39;login&#39;]&amp;quot;));
  loginButton.click();

  // wait for page to load
  By signInButtonLocator = By.cssSelector(&amp;quot;input.btn&amp;quot;);
  new WebDriverWait(driver, 10).until(
    ExpectedConditions.presenceOfElementLocated(signInButtonLocator)
  );

  // send username and password
  driver.findElement(By.id(&amp;quot;login_field&amp;quot;)).sendKeys(&amp;quot;nadavc&amp;quot;);
  driver.findElement(By.id(&amp;quot;password&amp;quot;)).sendKeys(&amp;quot;ohrly&amp;quot;);

  // submit
  WebElement signInButton = driver.findElement(signInButtonLocator);
  signInButton.click();

  // ..etc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  new GitHubHome(driver)
      .goToSignIn()
      .withUsername(&amp;quot;nadavc&amp;quot;)
      .withPassword(&amp;quot;ohrly&amp;quot;)
      .signIn();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tip-2-use-findby-to-remove-boilerplate:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #2 - Use @FindBy to remove boilerplate&lt;/h2&gt;

&lt;p&gt;PageObject is great for abstracting the UI, but the code is still a little verbose. Do you really need to call &lt;code&gt;driver.findElement()&lt;/code&gt; for every UI element that is encapsulated by the PageObject? And what if not all elements are available during class creation?&lt;/p&gt;

&lt;p&gt;Enter @FindBy - members annotated with @FindBy will be wrapped by a proxy that automatically looks up the element when called. You’ll need to call &lt;code&gt;PageFactory.initElements()&lt;/code&gt; to set this up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SignInPage extends SeleniumSegment {

    @FindBy(id = &amp;quot;login_field&amp;quot;)
    private WebElement loginField;

    @FindBy(id = &amp;quot;password&amp;quot;)
    private WebElement passwordField;

    @FindBy(css = &amp;quot;input[value=&#39;Sign in&#39;]&amp;quot;)
    private WebElement signInButton;

    // ... code omitted for brevity
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tip-3-split-large-pageobjects-into-smaller-objects:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #3 - Split large PageObjects into smaller objects&lt;/h2&gt;

&lt;p&gt;Even with the PageObjects pattern, large pages may result in excessive amounts of code in a single class. Some would say that this is a variation of the &lt;a href=&#34;http://en.wikipedia.org/wiki/God_object&#34;&gt;God Object&lt;/a&gt; anti-pattern. To address this, my recommendation is to break large PageObjects into smaller PageObject components and embed them within the large one.&lt;/p&gt;

&lt;h2 id=&#34;tip-4-encapsulate-repeated-blocks-into-their-own-pageobjects:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #4 - Encapsulate repeated blocks into their own PageObjects&lt;/h2&gt;

&lt;p&gt;Most webpages contain repeated blocks that can be abstracted into a single PageObject class. Makes sense when you look at the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/imgs/selenium-repeated-objects.png&#34; alt=&#34;Repeated blocks&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;But how do you tell Selenium to confine @FindBy to search &lt;em&gt;only&lt;/em&gt; for the right &lt;code&gt;.repo-list-name&lt;/code&gt;? Luckily, Selenium supports the notion of &lt;code&gt;context&lt;/code&gt; - whereas you get to define the root of @FindBy’s search. The trick is to call &lt;code&gt;PageFactory.initElements()&lt;/code&gt; with a custom &lt;code&gt;ElementLocatorFactory&lt;/code&gt;. See &lt;code&gt;SearchSegment.java&lt;/code&gt; for a more concrete example.&lt;/p&gt;

&lt;h2 id=&#34;tip-5-use-selenium-s-wait-mechanisms-within-pageobjects:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Tip #5 - Use Selenium’s Wait mechanisms within PageObjects&lt;/h2&gt;

&lt;p&gt;The web is asynchronous by nature, and our Selenium code needs to adapt. Always put wait code &lt;em&gt;within&lt;/em&gt; PageObjects, since these states belong in UI handling code and not anywhere else. Needless to say, &lt;code&gt;Thread.sleep()&lt;/code&gt; is not the solution&amp;hellip; use Selenium’s &lt;code&gt;WebDriverWait&lt;/code&gt; (or its &lt;code&gt;FluentWait&lt;/code&gt; facade).&lt;/p&gt;

&lt;h2 id=&#34;example-code:c6d25d9af7270ac98cf516a0c62f31bc&#34;&gt;Example code&lt;/h2&gt;

&lt;p&gt;In an effort to group all of these tips into working code, I built a simple GitHub scraper that uses Selenium to learn about Microsoft’s favorite open source languages. The source code is available through my &lt;a href=&#34;https://github.com/nadavc/nadavc-blog-code/tree/master/object-oriented-selenium&#34;&gt;GitHub account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;hellip;and yes, I&amp;rsquo;m well aware that this could have been done using GitHub&amp;rsquo;s &lt;a href=&#34;https://developer.github.com/v3/repos/#list-organization-repositories&#34;&gt;API&lt;/a&gt; and a few curl commands :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Genesis</title>
      <link>http://localhost:1313/posts/genesis/</link>
      <pubDate>Sun, 15 Mar 2015 01:46:11 -0700</pubDate>
      
      <guid>http://localhost:1313/posts/genesis/</guid>
      <description>&lt;p&gt;This is my third attempt at a blog. Why start another one? I have plenty of reasons &lt;strong&gt;not&lt;/strong&gt; to. It&amp;rsquo;s time consuming, difficult, irrelevant, boring, repetitive…  But I also have good reasons. I want to improve at articulating my ideas and keep a journal of my learnings (professionally or otherwise). I will try my best to post original content and stay out of clichés, but I can&amp;rsquo;t promise anything :-)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>